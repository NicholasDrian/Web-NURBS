import { Vec4 } from "wgpu-matrix";
import { INSTANCE } from "../../cad";
import { Material } from "../../materials/material";
import { CADWindow } from "../window"


export class MaterialsWindow extends CADWindow {

  private selectedMaterial: Material | null;

  constructor(
    name: string,
    start: [number, number],
    end: [number, number]
  ) {
    super(name, start, end);
    this.selectedMaterial = null
    this.renderMaterialList();
  }

  public populate(): void {
  }

  public tick(): void {
  }

  private renderMaterialList(): void {
    const materials: Map<string, Material> = INSTANCE.getMaterialManager().getMaterials();

    this.element.innerHTML = "<b><u>Materials:</u></b>";

    const list: HTMLElement = document.createElement("ul");

    const newMaterialButton: HTMLElement = document.createElement("li");
    newMaterialButton.innerHTML = "<b>Create New Material</b>";
    newMaterialButton.onclick = function() {
      const mat = new Material("");
      const thisWindow: MaterialsWindow = <MaterialsWindow>INSTANCE.getWindowManager().getWindows().get("materials");
      thisWindow.setSelectedMaterial(mat);
    };
    list.appendChild(newMaterialButton);

    for (const [name, material] of materials) {
      const element: HTMLElement = document.createElement("li");
      element.innerHTML = name;
      element.onmousedown = function(ev: MouseEvent) {
        const thisWindow: MaterialsWindow = <MaterialsWindow>INSTANCE.getWindowManager().getWindows().get("materials");
        thisWindow.setSelectedMaterial(material);
        ev.stopPropagation();
      }
      list.appendChild(element);
    }
    this.element.appendChild(list);
  }

  private test: number = 0;

  private createSlider(min: number, max: number, initialValue: number, handle: Function): HTMLInputElement {
    const res: HTMLInputElement = document.createElement("input");
    res.setAttribute("type", "range");
    res.setAttribute("min", min.toString());
    res.setAttribute("max", max.toString());
    res.setAttribute("step", "0.01");
    res.setAttribute("value", initialValue.toString());
    res.setAttribute("id", this.test++));
    res.oninput = function() {
      handle(parseFloat(res.value));
    }
    return res;
  }

  public updatedColor(val: number, idx: number) {
    console.log("659");
    const color: Vec4 = this.selectedMaterial!.getColor();
    color[idx] = val;
    this.selectedMaterial!.updateColor(color);
  }

  private renderMaterial(): void {

    const color: Vec4 = this.selectedMaterial!.getColor();
    const emissive: Vec4 = this.selectedMaterial!.getEmissive();

    this.element.innerHTML = "<b><u>Materials:</u></b><br><br>";

    const fields: HTMLElement = document.createElement("ul");

    this.element.innerHTML += "<b>Color:<b>";

    this.element.innerHTML += "<br>R:"
    const colorRedSlider: HTMLElement = this.createSlider(0, 1, color[0], (val: number) => {
      const thisWindow: MaterialsWindow = <MaterialsWindow>INSTANCE.getWindowManager().getWindows().get("materials");
      thisWindow.updatedColor(val, 0);
    });
    this.element.appendChild(colorRedSlider);

    this.element.innerHTML += "<br>G:"
    const colorGreenSlider: HTMLElement = this.createSlider(0, 1, color[1], (val: number) => {
      const thisWindow: MaterialsWindow = <MaterialsWindow>INSTANCE.getWindowManager().getWindows().get("materials");
      thisWindow.updatedColor(val, 1);
    });
    this.element.appendChild(colorGreenSlider);

    /*
    this.element.innerHTML += `<br>G:${color[1].toFixed(2)}`
    const colorGreenSlider: HTMLElement = this.createSlider(0, 1, this.selectedMaterial!.getColor()[1], (val: number) => {
      color[1] = val; this.selectedMaterial!.updateColor(color);
    });
    this.element.appendChild(colorGreenSlider);

    this.element.innerHTML += `<br>B:${color[2].toFixed(2)}`
    const colorBlueSlider: HTMLElement = this.createSlider(0, 1, this.selectedMaterial!.getColor()[2], (val: number) => {
      color[2] = val; this.selectedMaterial!.updateColor(color);
    });
    this.element.appendChild(colorBlueSlider);

    this.element.innerHTML += `<br>A:${color[3].toFixed(2)}`
    const colorAlphaSlider: HTMLElement = this.createSlider(0, 1, this.selectedMaterial!.getColor()[3], (val: number) => {
      color[3] = val; this.selectedMaterial!.updateColor(color);
    });
    this.element.appendChild(colorAlphaSlider);
    */

    const backButton: HTMLElement = document.createElement("li");
    backButton.innerHTML = "<b>Back</b>";
    backButton.onclick = function(ev: MouseEvent) {
      const thisWindow: MaterialsWindow = <MaterialsWindow>INSTANCE.getWindowManager().getWindows().get("materials");
      thisWindow.setSelectedMaterial(null);
      ev.stopPropagation();
    };
    fields.appendChild(backButton);

    const deleteButton: HTMLElement = document.createElement("li");
    deleteButton.innerHTML = "<b>Delete</b>"
    deleteButton.onclick = function(ev: MouseEvent) {
      const thisWindow: MaterialsWindow = <MaterialsWindow>INSTANCE.getWindowManager().getWindows().get("materials");
      const mat: Material = thisWindow.getSelectedMaterial()!;
      INSTANCE.getMaterialManager().removeMaterial(mat.getName());
      thisWindow.setSelectedMaterial(null);
      ev.stopPropagation();
    };
    fields.appendChild(deleteButton);

    this.element.appendChild(fields);

  }

  public getSelectedMaterial(): Material | null {
    return this.selectedMaterial;
  }

  public setSelectedMaterial(material: Material | null): void {
    this.selectedMaterial = material;
    if (this.selectedMaterial) {
      this.renderMaterial();
    } else {
      this.renderMaterialList();
    }
  }

}
